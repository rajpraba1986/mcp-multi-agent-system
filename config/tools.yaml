# MCP Toolbox Configuration
# This file defines data sources, tools, and toolsets for the MCP Toolbox server

sources:
  # PostgreSQL database source
  main-postgres:
    kind: postgres
    host: ${POSTGRES_HOST:-localhost}
    port: ${POSTGRES_PORT:-5432}
    database: ${POSTGRES_DB:-toolbox_demo}
    user: ${POSTGRES_USER:-demo_user}
    password: ${POSTGRES_PASSWORD:-demo_password}
    
  # SQLite database for local development
  local-sqlite:
    kind: sqlite
    database: ${SQLITE_DB:-./data/demo.db}

  # Browserbase MCP server configuration
  browserbase:
    kind: mcp-server
    server_url: ${BROWSERBASE_MCP_URL:-http://localhost:8931}
    api_key: ${BROWSERBASE_API_KEY:-}
    project_id: ${BROWSERBASE_PROJECT_ID:-}
    config:
      proxies: ${BROWSERBASE_PROXIES:-false}
      advanced_stealth: ${BROWSERBASE_STEALTH:-false}
      persist_context: ${BROWSERBASE_PERSIST:-true}
      viewport_width: ${BROWSERBASE_WIDTH:-1920}
      viewport_height: ${BROWSERBASE_HEIGHT:-1080}

tools:
  # User management tools
  search-users-by-name:
    kind: postgres-sql
    source: main-postgres
    description: Search for users based on their name (partial match supported)
    parameters:
      - name: name
        type: string
        description: The name or partial name to search for
    statement: |
      SELECT 
        id, 
        full_name, 
        email, 
        created_at, 
        last_login
      FROM users 
      WHERE full_name ILIKE '%' || $1 || '%'
      ORDER BY created_at DESC
      LIMIT 50;

  search-users-by-email:
    kind: postgres-sql
    source: main-postgres
    description: Search for users by email address
    parameters:
      - name: email
        type: string
        description: The email address to search for
    statement: |
      SELECT 
        id, 
        full_name, 
        email, 
        created_at, 
        last_login,
        status
      FROM users 
      WHERE email ILIKE '%' || $1 || '%'
      ORDER BY created_at DESC;

  get-user-activity:
    kind: postgres-sql
    source: main-postgres
    description: Get user activity and interaction history
    parameters:
      - name: user_id
        type: integer
        description: The ID of the user
      - name: days
        type: integer
        description: Number of days to look back (default 30)
    statement: |
      SELECT 
        ua.action_type,
        ua.action_details,
        ua.timestamp,
        ua.ip_address
      FROM user_activities ua
      WHERE ua.user_id = $1
        AND ua.timestamp >= NOW() - INTERVAL '$2 days'
      ORDER BY ua.timestamp DESC
      LIMIT 100;

  # Analytics and reporting tools
  sales-summary-by-period:
    kind: postgres-sql
    source: main-postgres
    description: Get sales summary for a specific period
    parameters:
      - name: start_date
        type: string
        description: Start date in YYYY-MM-DD format
      - name: end_date
        type: string
        description: End date in YYYY-MM-DD format
    statement: |
      SELECT 
        DATE_TRUNC('day', order_date) as date,
        COUNT(*) as total_orders,
        SUM(total_amount) as total_revenue,
        AVG(total_amount) as avg_order_value,
        COUNT(DISTINCT customer_id) as unique_customers
      FROM orders 
      WHERE order_date BETWEEN $1::date AND $2::date
      GROUP BY DATE_TRUNC('day', order_date)
      ORDER BY date;

  top-selling-products:
    kind: postgres-sql
    source: main-postgres
    description: Get top selling products for a time period
    parameters:
      - name: start_date
        type: string
        description: Start date in YYYY-MM-DD format
      - name: end_date
        type: string
        description: End date in YYYY-MM-DD format
      - name: limit
        type: integer
        description: Number of top products to return (default 20)
    statement: |
      SELECT 
        p.name as product_name,
        p.category,
        SUM(oi.quantity) as total_quantity_sold,
        SUM(oi.quantity * oi.unit_price) as total_revenue,
        COUNT(DISTINCT o.id) as order_count
      FROM order_items oi
      JOIN orders o ON oi.order_id = o.id
      JOIN products p ON oi.product_id = p.id
      WHERE o.order_date BETWEEN $1::date AND $2::date
      GROUP BY p.id, p.name, p.category
      ORDER BY total_revenue DESC
      LIMIT $3;

  customer-analysis:
    kind: postgres-sql
    source: main-postgres
    description: Analyze customer behavior and segments
    parameters:
      - name: months_back
        type: integer
        description: Number of months to analyze (default 12)
    statement: |
      WITH customer_metrics AS (
        SELECT 
          c.id,
          c.email,
          c.created_at,
          COUNT(o.id) as total_orders,
          SUM(o.total_amount) as total_spent,
          AVG(o.total_amount) as avg_order_value,
          MAX(o.order_date) as last_order_date,
          MIN(o.order_date) as first_order_date
        FROM customers c
        LEFT JOIN orders o ON c.id = o.customer_id
        WHERE o.order_date >= NOW() - INTERVAL '$1 months'
        GROUP BY c.id, c.email, c.created_at
      )
      SELECT 
        *,
        CASE 
          WHEN total_orders = 0 THEN 'No Orders'
          WHEN total_orders = 1 THEN 'One-time Buyer'
          WHEN total_orders BETWEEN 2 AND 5 THEN 'Occasional Buyer'
          WHEN total_orders > 5 THEN 'Frequent Buyer'
        END as customer_segment,
        EXTRACT(days FROM NOW() - last_order_date) as days_since_last_order
      FROM customer_metrics
      ORDER BY total_spent DESC;

  # Inventory management
  low-stock-alert:
    kind: postgres-sql
    source: main-postgres
    description: Find products with low stock levels
    parameters:
      - name: threshold
        type: integer
        description: Stock threshold below which to alert (default 10)
    statement: |
      SELECT 
        p.id,
        p.name,
        p.category,
        p.current_stock,
        p.min_stock_level,
        p.last_restocked
      FROM products p
      WHERE p.current_stock <= $1
        AND p.status = 'active'
      ORDER BY p.current_stock ASC;

  # Financial reporting
  revenue-by-category:
    kind: postgres-sql
    source: main-postgres
    description: Get revenue breakdown by product category
    parameters:
      - name: start_date
        type: string
        description: Start date in YYYY-MM-DD format
      - name: end_date
        type: string
        description: End date in YYYY-MM-DD format
    statement: |
      SELECT 
        p.category,
        COUNT(DISTINCT o.id) as total_orders,
        SUM(oi.quantity) as total_items_sold,
        SUM(oi.quantity * oi.unit_price) as total_revenue,
        AVG(oi.unit_price) as avg_unit_price
      FROM order_items oi
      JOIN orders o ON oi.order_id = o.id
      JOIN products p ON oi.product_id = p.id
      WHERE o.order_date BETWEEN $1::date AND $2::date
      GROUP BY p.category
      ORDER BY total_revenue DESC;

  # Browserbase web automation tools
  browserbase-create-session:
    kind: mcp-tool
    source: browserbase
    description: Create a new browser session for web automation
    parameters:
      - name: width
        type: integer
        description: Browser viewport width
        default: 1920
      - name: height
        type: integer
        description: Browser viewport height
        default: 1080
      - name: persist
        type: boolean
        description: Whether to persist the session context
        default: true

  browserbase-navigate:
    kind: mcp-tool
    source: browserbase
    description: Navigate to a specific URL
    parameters:
      - name: url
        type: string
        description: The URL to navigate to
        required: true

  browserbase-extract-data:
    kind: mcp-tool
    source: browserbase
    description: Extract structured data from the current page
    parameters:
      - name: extraction_type
        type: string
        description: Type of extraction (table, form, product, article, custom)
        default: "general"
      - name: selectors
        type: object
        description: CSS selectors for custom extraction
        default: {}

  browserbase-screenshot:
    kind: mcp-tool
    source: browserbase
    description: Take a screenshot of the current page
    parameters:
      - name: full_page
        type: boolean
        description: Whether to capture the full page
        default: true
      - name: element
        type: string
        description: CSS selector for specific element screenshot
        default: null

  browserbase-click:
    kind: mcp-tool
    source: browserbase
    description: Click on an element
    parameters:
      - name: selector
        type: string
        description: CSS selector for the element to click
        required: true
      - name: wait_for
        type: string
        description: Wait for element to be clickable
        default: "visible"

  browserbase-type:
    kind: mcp-tool
    source: browserbase
    description: Type text into an input element
    parameters:
      - name: selector
        type: string
        description: CSS selector for the input element
        required: true
      - name: text
        type: string
        description: Text to type
        required: true
      - name: clear
        type: boolean
        description: Whether to clear the input first
        default: true

  browserbase-extract-table:
    kind: mcp-tool
    source: browserbase
    description: Extract table data from the current page
    parameters:
      - name: table_selector
        type: string
        description: CSS selector for the table
        default: "table"
      - name: include_headers
        type: boolean
        description: Whether to include table headers
        default: true

  browserbase-extract-forms:
    kind: mcp-tool
    source: browserbase
    description: Extract form data from the current page
    parameters:
      - name: form_selector
        type: string
        description: CSS selector for forms
        default: "form"
      - name: include_values
        type: boolean
        description: Whether to include current form values
        default: true

  browserbase-extract-content:
    kind: mcp-tool
    source: browserbase
    description: Extract content from the current page
    parameters:
      - name: include_links
        type: boolean
        description: Whether to include links in extraction
        required: false

  browserbase-extract-stock-data:
    kind: mcp-tool
    source: browserbase
    description: Extract stock data from financial websites
    parameters:
      - name: url
        type: string
        description: The financial website URL to extract from
        required: true
      - name: extraction_type
        type: string
        description: Type of extraction (stock, sector, market)
        required: false

  browserbase-click-element:
    kind: mcp-tool
    source: browserbase
    description: Click on a specific element
    parameters:
      - name: selector
        type: string
        description: CSS selector for the element to click
        required: true

  browserbase-type-text:
    kind: mcp-tool
    source: browserbase
    description: Type text into an input field
    parameters:
      - name: selector
        type: string
        description: CSS selector for the input field
        required: true
      - name: text
        type: string
        description: Text to type
        required: true

  # Yahoo Finance specific tools
  yahoo-finance-extract-semiconductors:
    kind: mcp-tool
    source: browserbase
    description: Extract semiconductor stock data from Yahoo Finance
    parameters: []
    default_config:
      url: "https://finance.yahoo.com/sectors/technology/semiconductors/"
      extraction_type: "stock"
      selectors:
        stock_table: "table"
        stock_rows: "tr"
        stock_symbol: "td:nth-child(1)"
        stock_name: "td:nth-child(2)"
        stock_price: "td:nth-child(3)"
        stock_change: "td:nth-child(4)"
        stock_change_percent: "td:nth-child(5)"
        stock_volume: "td:nth-child(6)"
        market_cap: "td:nth-child(7)"

  # SQLite storage for web extractions
  store-web-extraction:
    kind: sqlite-sql
    source: local-sqlite
    description: Store web extraction data in SQLite database
    parameters:
      - name: url
        type: string
        description: The URL that was extracted
      - name: title
        type: string
        description: The page title
      - name: content
        type: string
        description: The extracted content
      - name: extraction_type
        type: string
        description: The type of extraction performed
      - name: structured_data
        type: string
        description: JSON string of structured data
    statement: |
      INSERT INTO web_extractions (url, title, content, extraction_type, extracted_data, timestamp)
      VALUES ($1, $2, $3, $4, $5, datetime('now'))
      RETURNING id;

  query-web-extractions:
    kind: sqlite-sql
    source: local-sqlite
    description: Query stored web extractions
    parameters:
      - name: url_pattern
        type: string
        description: URL pattern to search for (uses LIKE)
        default: "%"
      - name: extraction_type
        type: string
        description: Type of extraction to filter by
        default: null
      - name: limit
        type: integer
        description: Maximum number of results
        default: 10
    statement: |
      SELECT 
        id,
        url,
        title,
        content,
        extraction_type,
        extracted_data,
        timestamp
      FROM web_extractions
      WHERE url LIKE $1
        AND ($2 IS NULL OR extraction_type = $2)
      ORDER BY timestamp DESC
      LIMIT $3;

toolsets:
  # User management toolset
  user-management:
    - search-users-by-name
    - search-users-by-email
    - get-user-activity

  # Analytics toolset
  sales-analytics:
    - sales-summary-by-period
    - top-selling-products
    - revenue-by-category

  # Customer insights toolset
  customer-insights:
    - customer-analysis
    - sales-summary-by-period

  # Operations toolset
  operations:
    - low-stock-alert

  # Web automation toolset
  web-automation:
    - browserbase-create-session
    - browserbase-navigate
    - browserbase-extract-data
    - browserbase-screenshot
    - browserbase-click
    - browserbase-type
    - browserbase-extract-table
    - browserbase-extract-forms
    - store-web-extraction
    - query-web-extractions

  # Complete toolset for full access
  all-tools:
    - search-users-by-name
    - search-users-by-email
    - get-user-activity
    - sales-summary-by-period
    - top-selling-products
    - customer-analysis
    - low-stock-alert
    - revenue-by-category
    - browserbase-create-session
    - browserbase-navigate
    - browserbase-extract-data
    - browserbase-screenshot
    - browserbase-click
    - browserbase-type
    - browserbase-extract-table
    - browserbase-extract-forms
    - store-web-extraction
    - query-web-extractions
